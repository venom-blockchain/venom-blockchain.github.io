"use strict";(self.webpackChunkve_ps=self.webpackChunkve_ps||[]).push([[3486],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return t?o.createElement(m,r(r({ref:n},d),{},{components:t})):o.createElement(m,r({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1843:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(7462),a=(t(7294),t(4137));const i={sidebar_position:1,sidebar_label:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper."},r="Quick start developing with TIP-4",l={unversionedId:"build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",id:"build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",title:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper.",source:"@site/docs/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4.md",sourceDirName:"build/development-guides/how-to-create-your-own-non-fungible-tip-4-token",slug:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper."},sidebar:"buildSidebar",previous:{title:"Non-Fungible tokens in Venom network",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/non-fungible-tokens-in-venom-network"},next:{title:"Simple NFT auction",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/venom-in-action/simple-nft-auction"}},s={},c=[{value:"Source Code",id:"source-code",level:2},{value:"How to deploy your own NFT collection",id:"how-to-deploy-your-own-nft-collection",level:2},{value:"Initialize your NFT project",id:"initialize-your-nft-project",level:3},{value:"Install dependencies",id:"install-dependencies",level:3},{value:"Implement base contracts",id:"implement-base-contracts",level:3},{value:"Deploy action",id:"deploy-action",level:3}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-start-developing-with-tip-4"},"Quick start developing with TIP-4"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"During the following of this guide's code-listings you can meet keywords like ",(0,a.kt)("inlineCode",{parentName:"p"},"pragma ever-solidity")," or keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"ever")," as a unit of the transfer value. It will be changed to ",(0,a.kt)("inlineCode",{parentName:"p"},"venom")," soon. Follow the news and updates.")),(0,a.kt)("h2",{id:"source-code"},"Source Code"),(0,a.kt)("p",null,"You can inspect the source code of TIP-4 token implementation by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/broxus/tip4"},"link"),"."),(0,a.kt)("h2",{id:"how-to-deploy-your-own-nft-collection"},"How to deploy your own NFT collection"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You need to have an installed Smart Contract Development Environment. If you haven't already, follow ",(0,a.kt)("a",{parentName:"p",href:"../setting-up-the-venom-smart-contract-development-environment"},"this tutorial"),".")),(0,a.kt)("h3",{id:"initialize-your-nft-project"},"Initialize your NFT project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx locklift init --path my-first-nft\n> [INFO]  New Locklift project initialized in .\n> [INFO]  Installing required dependencies...\n> [INFO]  \n> added 181 packages, and audited 182 packages in 13s\n\n> 23 packages are looking for funding\n>   run `npm fund` for details\n\n> found 0 vulnerabilities\n\n> [INFO]  LockLift initialized in my-first-nft happy hacking!\n")),(0,a.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,a.kt)("p",null,"TIP-4 is accessible from npm. Let's install it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm i --save-dev @broxus/tip4\n")),(0,a.kt)("h3",{id:"implement-base-contracts"},"Implement base contracts"),(0,a.kt)("p",null,"Next, you should implement two interfaces in two contracts. Firstly, let's deal with Nft contract. The only thing we should do for basics is implementing `TIP4_1Nft``"," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Nft.tsol" showLineNumbers',title:'"Nft.tsol"',showLineNumbers:!0},"pragma ever-solidity >= 0.62.0;\npragma AbiHeader expire;\npragma AbiHeader pubkey;\n\n// importing all standards bases\nimport '@broxus/tip4/contracts/TIP4_1/TIP4_1Nft.tsol';\nimport '@broxus/tip4/contracts/TIP4_2/TIP4_2Nft.tsol';\nimport '@broxus/tip4/contracts/TIP4_3/TIP4_3Nft.tsol';\n\n\ncontract Nft is TIP4_1Nft, TIP4_2Nft, TIP4_3Nft {\n\n    // just call constructors of all implemented classes\n    constructor(\n        address owner,\n        address sendGasTo,\n        uint128 remainOnNft,\n        string json, // for TIP-4.2\n        TvmCell codeIndex, // for TIP-4.3\n        uint128 indexDeployValue, // for TIP-4.3\n        uint128 indexDestroyValue // for TIP-4.3\n    ) TIP4_1Nft(\n        owner,\n        sendGasTo,\n        remainOnNft\n    ) TIP4_2Nft (\n        json\n    ) TIP4_3Nft (\n        indexDeployValue,\n        indexDestroyValue,\n        codeIndex\n    ) \n    public {\n        \n    }\n")),(0,a.kt)("p",null,"Now we should go for the Collection contract. We should implement ",(0,a.kt)("inlineCode",{parentName:"p"},"TIP4_1Collection")," and write some method for NFT deploying."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Collection.tsol" showLineNumbers',title:'"Collection.tsol"',showLineNumbers:!0},'pragma ever-solidity >= 0.62.0;\n\npragma AbiHeader expire;\npragma AbiHeader time;\npragma AbiHeader pubkey;\n\nimport "@broxus/tip4/contracts/TIP4_2/TIP4_2Collection.tsol";\nimport "@broxus/tip4/contracts/TIP4_3/TIP4_3Collection.tsol";\nimport "@broxus/contracts/contracts/access/InternalOwner.tsol";\n\nimport \'./Nft.tsol\';\n\ncontract Collection is TIP4_2Collection, TIP4_3Collection {\n\n    uint64 static nonce_;\n\n    constructor(\n        TvmCell codeNft,\n        TvmCell codeIndex,\n        TvmCell codeIndexBasis,\n        address owner,\n        uint128 remainOnNft,\n        string json\n    )\n        public\n        TIP4_1Collection(codeNft)\n        TIP4_2Collection(json)\n        TIP4_3Collection(codeIndex, codeIndexBasis\n    ) {\n        tvm.accept();\n        tvm.rawReserve(1 ever, 0);\n        owner = msg.sender;\n    }\n\n    function codeDepth() public view returns(uint16) {\n        return (_buildNftCode(address(this)).depth());\n    }\n\n    function _buildNftState(TvmCell code, uint256 id)\n        internal\n        pure\n        virtual\n        override (TIP4_2Collection, TIP4_3Collection)\n        returns (TvmCell)\n    {\n        return tvm.buildStateInit({contr: Nft, varInit: {_id: id}, code: code});\n    }\n\n    function mintNft(string json) external virtual {\n        require(msg.value > 0.4 ever, 101);\n        tvm.rawReserve(0, 4);\n\n        uint256 id = uint256(_totalSupply);\n        _totalSupply++;\n\n        TvmCell codeNft = _buildNftCode(address(this));\n        TvmCell stateNft = tvm.buildStateInit({\n            contr: Nft,\n            varInit: {_id: id},\n            code: codeNft\n        });\n        new Nft{\n            stateInit: stateNft,\n            value: 0,\n            flag: 128\n        }(\n            msg.sender,\n            msg.sender,\n            0.3 ever,\n            json,                // put your json here\n            _codeIndex,        // for TIP-4.3\n            _indexDeployValue, // for TIP-4.3\n            _indexDestroyValue // for TIP-4.3\n        );\n    }\n}\n')),(0,a.kt)("p",null,"The previous code uses only TIP-4.1 part of TIP-4. But it is kinda useless. To work with your NFT with full NFT experience you should implement ",(0,a.kt)("a",{parentName:"p",href:"/standards/TIP/TIP-4/2"},"TIP-4.2")," - standard, which helps you with NFT metadata storing. Also, you will need ",(0,a.kt)("a",{parentName:"p",href:"/standards/TIP/TIP-4/3"},"TIP-4.3")," - standard, which helps other dApps to find all your NFT with single query (GQL or JRPC). You should study the information about these standards by links. Implementation of 4.2 and 4.3 is pretty simple."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Nft.tsol" showLineNumbers',title:'"Nft.tsol"',showLineNumbers:!0},"pragma ever-solidity >= 0.62.0;\npragma AbiHeader expire;\npragma AbiHeader pubkey;\n\n// importing all standards bases\nimport '@broxus/tip4/contracts/TIP4_1/TIP4_1Nft.tsol';\nimport '@broxus/tip4/contracts/TIP4_2/TIP4_2Nft.tsol';\nimport '@broxus/tip4/contracts/TIP4_3/TIP4_3Nft.tsol';\n\n\ncontract Nft is TIP4_1Nft, TIP4_2Nft, TIP4_3Nft {\n\n    // just call constructors of all implemented classes\n    constructor(\n        address owner,\n        address sendGasTo,\n        uint128 remainOnNft,\n        string json, // for TIP-4.2\n        TvmCell codeIndex, // for TIP-4.3\n        uint128 indexDeployValue, // for TIP-4.3\n        uint128 indexDestroyValue // for TIP-4.3\n    ) TIP4_1Nft(\n        owner,\n        sendGasTo,\n        remainOnNft\n    ) TIP4_2Nft (\n        json\n    ) TIP4_3Nft (\n        indexDeployValue,\n        indexDestroyValue,\n        codeIndex\n    ) \n    public {\n        \n    }\n\n    // Also, you need to implement some handlers, linked with NFT transferring\n    // Maybe you need to implement something special, but you can also use default handlers\n    \n    function _beforeTransfer(\n        address to, \n        address sendGasTo, \n        mapping(address => CallbackParams) callbacks\n    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {\n        TIP4_3Nft._destructIndex(sendGasTo);\n    }\n\n    function _afterTransfer(\n        address to, \n        address sendGasTo, \n        mapping(address => CallbackParams) callbacks\n    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {\n        TIP4_3Nft._deployIndex();\n    }\n\n    function _beforeChangeOwner(\n        address oldOwner, \n        address newOwner,\n        address sendGasTo, \n        mapping(address => CallbackParams) callbacks\n    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {\n        TIP4_3Nft._destructIndex(sendGasTo);\n    }   \n\n    function _afterChangeOwner(\n        address oldOwner, \n        address newOwner,\n        address sendGasTo, \n        mapping(address => CallbackParams) callbacks\n    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {\n        TIP4_3Nft._deployIndex();\n    }\n\n    function _beforeChangeManager(\n        address oldManager,\n        address newManager,\n        address sendGasTo,\n        mapping(address => CallbackParams) callbacks\n    ) internal override virtual {\n        oldManager; newManager; sendGasTo; callbacks; //disable warnings\n    }\n\n    function _afterChangeManager(\n        address oldManager,\n        address newManager,\n        address sendGasTo,\n        mapping(address => CallbackParams) callbacks\n    ) internal override virtual {\n        oldManager; newManager; sendGasTo; callbacks; //disable warnings\n    }\n\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Notice, that Index (and IndexBasis) code must be precompiled! You shouldn't compile these contracts by yourself. Just take it from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/venom-blockchain/guides/tree/master/nft-auction-contracts/precompiled"},"here"),", place it somewhere in your project, and add them as external contracts in your locklift config like this:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="locklift.config.ts" lineNumbers="false"',title:'"locklift.config.ts"',lineNumbers:'"false"'},'...\n  compiler: {\n    // Specify path to your TON-Solidity-Compiler\n    // path: "/mnt/o/projects/broxus/TON-Solidity-Compiler/build/solc/solc",\n\n    // Or specify version of compiler\n    version: "0.62.0",\n\n    // Specify config for extarnal contracts as in exapmple\n    externalContracts: {\n      "../path/to/precompiled/indexes": ["Index", "IndexBasis"],\n    }\n    ...\n'))),(0,a.kt)("h3",{id:"deploy-action"},"Deploy action"),(0,a.kt)("p",null,"Let's move to deploy action. We need two scripts for this quick start: one for ",(0,a.kt)("inlineCode",{parentName:"p"},"Collection")," deploying, and the second for calling ",(0,a.kt)("inlineCode",{parentName:"p"},"mintNft")," function, that we have implemented."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="1-deploy-collection.ts" showLineNumbers',title:'"1-deploy-collection.ts"',showLineNumbers:!0},'import { Address } from "locklift";\n\nasync function main() {\n  const signer = (await locklift.keystore.getSigner("0"))!;\n  const nftArtifacts = await locklift.factory.getContractArtifacts("Nft");\n  const indexArtifacts = await locklift.factory.getContractArtifacts("Index");\n  const indexBasisArtifacts = await locklift.factory.getContractArtifacts("IndexBasis");\n\n  const owner = new Address(\'0:0000000000000000000000000000000000000000000000000000000000000000\')\n\n  const { contract: sample, tx } = await locklift.factory.deployContract({\n    contract: "Collection",\n    publicKey: signer.publicKey,\n    initParams: {\n      nonce_: 0,\n    },\n    constructorParams: {\n      codeNft: nftArtifacts.code,\n      codeIndex: indexArtifacts.code,\n      codeIndexBasis: indexBasisArtifacts.code,\n      owner: owner,\n      remainOnNft: locklift.utils.toNano(0.2),\n      json: `{"collection":"tutorial"}` // EXAMPLE...not by TIP-4.2\n    },\n    value: locklift.utils.toNano(5),\n  });\n\n  console.log(`Collection deployed at: ${sample.address.toString()}`);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(e => {\n    console.log(e);\n    process.exit(1);\n  });\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="2-call-mintNft.ts" showLineNumbers',title:'"2-call-mintNft.ts"',showLineNumbers:!0},'import { toNano, WalletTypes } from "locklift";\n\n// you can get this parameter as (await locklift.keystore.getSigner("0"))! if you have a seed phrase sets up in key section of locklift config\n// or you can pass this parameter by cli or get them by some file reading for example\n// if phrase or secret was not set up in key section, calling (await locklift.keystore.getSigner("0"))! will give you a different results from launch to lauch\n// we just hardcode it here\n// const COLLECTION_DEPLOY_PUBLIC_KEY = "e85f61aaef0ea43afc14e08e6bd46c3b996974c495a881baccc58760f6349300"\n\nasync function main() {\n    const signer = (await locklift.keystore.getSigner("0"))!;\n    const collectionArtifacts = locklift.factory.getContractArtifacts("Collection");\n\n    // calculation of deployed Collection contract address\n    const collectionAddress = await locklift.provider.getExpectedAddress(\n        collectionArtifacts.abi,\n        {\n            tvc: collectionArtifacts.tvc,\n            publicKey: signer.publicKey,\n            initParams: {\n                nonce_: 0,\n            }\n        }\n    );\n    // initialize contract object by locklift\n    const collectionInsance = await locklift.factory.getDeployedContract(\n        "Collection",\n        collectionAddress\n    );\n\n    // creating new account for Collection calling (or you can get already deployed by locklift.factory.accounts.addExistingAccount)\n    const { account: someAccount } = await locklift.factory.accounts.addNewAccount({\n        type: WalletTypes.WalletV3,\n        value: toNano(10),\n        publicKey: signer.publicKey\n    });\n    // call mintNft function\n    // firstly get current nft id (totalSupply) for future NFT address calculating\n    const {count: id} = await collectionInsance.methods.totalSupply({ answerId: 0 }).call();\n    await collectionInsance.methods.mintNft({ json: `{"name":"hello world"}` }).send({ from: someAccount.address, amount: toNano(1)});\n    const { nft: nftAddress } = await collectionInsance.methods.nftAddress({ answerId: 0, id: id }).call();\n  \n    console.log(`NFT: ${nftAddress.toString()}`);\n}\n  \nmain()\n    .then(() => process.exit(0))\n    .catch(e => {\n        console.log(e);\n        process.exit(1);\n    });\n')),(0,a.kt)("p",null,"Finally, we can deploy a new token to the ",(0,a.kt)("inlineCode",{parentName:"p"},"local")," network. For this, make sure the local node is running, if not follow the next command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d --name local-node -e USER_AGREEMENT=yes -p80:80 tonlabs/local-node\n")),(0,a.kt)("p",null,"and run our scripts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx locklift run -s ./scripts/1-deploy-collection.ts -n local\n> [INFO]  factorySource generated\n> [INFO]  Built\n> Collection deployed at: 0:882c1f7af09efaf506ab313daecb6ce127acfab7d082e28e6dbcff839aa58bba\nnpx locklift run -s ./scripts/2-call-mintNft.ts -n local\n> [INFO]  factorySource generated\n> [INFO]  Built\n> NFT: 0:64a4ea8fa80bf3d2ba78c0a602e39a045786a70b69e879f90e9abe2a2f7f33fe</code></pre>\n")),(0,a.kt)("p",null,"Now you know how to deploy your own NFT collection and mint NFT with TIP-4 standard!"))}p.isMDXComponent=!0}}]);